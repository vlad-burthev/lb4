import numpy as np
import socket
import pickle
import time

DB1 = np.array([
    [-600, 500, 50, 250, 100, 200, 50, 30, 50, 200],
    [500, -600, 50, 50, 250, 100, 80, 60, 150, 40],
    [50, 50, -525, 200, 50, 40, 100, 70, 200, 25],
    [250, 50, 200, -475, 10, 70, 40, 25, 30, 50],
    [100, 250, 50, 10, -425, 100, 150, 40, 100, 250],
    [200, 100, 40, 70, 100, -380, 100, 60, 30, 45],
    [50, 80, 100, 40, 150, 100, -300, 80, 65, 30],
    [30, 60, 70, 25, 40, 60, 80, -250, 100, 90],
    [50, 150, 200, 30, 100, 30, 65, 100, -70, 200],
    [200, 40, 25, 50, 250, 45, 30, 90, 200, -20]
])

DB2 = np.array([
    [-100, 50, 10, 25, 30],
    [50, -60, 5, 10, 25],
    [10, 5, -50, 20, 50],
    [25, 10, 20, -40, 10],
    [30, 25, 50, 10, -10]
])

def calculate_largest_eigenvalue(matrix):
    eigenvalues = np.linalg.eigvals(matrix)
    largest_eigenvalue = max(eigenvalues, key=lambda x: abs(x))
    return largest_eigenvalue

def host_computer():
    
    # Задача 1.  Для матриці мінімальної (меншої) розмірності 10х10 або 5х5 
    # вираховувати найбільше власне число L1 на власному комп’ютері. 
    # При обчисленні дозволяється використовувати програми з інтернету і довільно обирати метод обчислень. 
    # (Наприклад: метод Лавєр’є-Ньютона, метод Крилова, метод Данілевського та ін.)   
    print("Хост: Завдання №1 - Розрахувати L1 для мінімальної матриці")
    L1 = calculate_largest_eigenvalue(DB2)
    print(f"Хост: L1: {L1}")
    

    # Задача 2.  Для матриці більшої розмірності провести обчислення 
    # найбільшого власного числа L2, аналогічно виконанню задачі 
    # 1. Розрахунки по задачі 2 мають бути виконані на віддаленому сервері (slave-ОК).
    print("Хост: Підключення до серверу")
    host = '13.49.66.69'  
    port = 65432
    
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.connect((host, port))
            print("Хост: Підключенно до серверу")
            
            data = pickle.dumps(DB1)
            s.sendall(data)
            s.shutdown(socket.SHUT_WR) 
            print("Хост: Відправлено матрицю на сервер")
            
            
            print("Хост: Чекаємо L2 результат з серверу")
            result_data = b""
            while True:
                packet = s.recv(4096)
                if not packet:
                    break
                result_data += packet
            
            L2 = pickle.loads(result_data)
            print(f"Хост: Результат L2 з серверу: {L2}")
            
        except Exception as e:
            print(f"Хост: Проблема з сервером: {e}")
            L2 = calculate_largest_eigenvalue(DB1)
    
    # Задача 3. Головна програма, яка розміщується на host-комп’ютері, після виконання задачі 1, 
    # чекає отримання результатів розрахунків задачі 2 від slave-ОК 
    # (використовувати двійкові або лічильні семафори, м’ютекси та ін.) і виконує обчислення L3

    print("Хост: Задача 3")
    if abs(L1) > abs(L2):
        L3 = (L1**2) * L2
        print(f"Хост: L1 > L2, за формулою: L3 = (L1^2) * L2")
    else:
        L3 = L1 * (L2**2)
        print(f"Хост: L1 <= L2, за формулою: L3 = L1 * (L2^2)")
    
    print("\n=====Рeзултат=====")
    print(f"L1: {L1}")
    print(f"L2: {L2}")
    print(f"L3: {L3}")
    
    
    return L1, L2, L3

if __name__ == "__main__":
    print("Хост")
    host_computer()